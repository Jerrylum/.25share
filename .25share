#!/usr/bin/env python3

import socket
import _thread
import base64
import sys
import os
import hashlib
import argparse

from Crypto import Random
from Crypto.Cipher import PKCS1_v1_5 as Cipher_pkcs1_v1_5
from Crypto.PublicKey import RSA
from Crypto.Cipher import AES


RED = '[31m'
GREEN = '[32m'
YELLOW = '[33m'
BLUE = '[34m'
RESET = '[0m'

PONG_FLAG = bytes([3])
COPY_FLAG = bytes([4])


###############################################################################
###############################################################################


class Server:
    def __init__(self, host, port):
        self.host = host
        self.port = port

        random_generator = Random.new().read

        rsa = RSA.generate(1024, random_generator)

        privatePem = rsa.exportKey()
        RSAKey = RSA.importKey(privatePem)
        self.cipher = Cipher_pkcs1_v1_5.new(RSAKey)

        publicPem = rsa.publickey().exportKey()

        # always base64 encoded
        publicPemNoHeader = ''.join(publicPem.decode().split('\n')[1:-1])

        self.firstRSAPublicKeySendOutMessage = bytearray(
            publicPemNoHeader, 'utf8')
        self.binaryPublicKey = base64.b64decode(publicPemNoHeader)

        self.socket = s = socket.socket()
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        s.bind((self.host, self.port))
        s.listen(5)

        self.flags = DEFAULT_FLAGS
        self.latestClient = None
        self.clients = []
        self._clientCount = 1

    def close(self):
        self.socket.close()

    def addClient(self, client):
        client.id = str(self._clientCount)
        self._clientCount += 1
        self.clients.append(client)

    def removeClient(self, client):
        self.clients.remove(client)


class Client():
    def __init__(self, server, conn, addr):
        self.conn = conn
        self.addr = addr
        self.server = server
        self.allowed = DEFAULT_ALLOW
        self.id = None

    def close(self):
        self.conn.shutdown(socket.SHUT_WR)
        self.conn.close()

    def getAESKey(self):
        encrypted_data = self.conn.recv(128)
        if not encrypted_data:
            raise Exception('0')

        data = self.server.cipher.decrypt(encrypted_data, [])

        self.shareKey = data[0:32]
        self.shareIv = data[32:48]

        m = hashlib.md5()
        m.update(self.server.binaryPublicKey)
        m.update(self.shareKey)
        self.securityCode = m.hexdigest().upper()

    def recvMessage(self):
        encrypted_data = self.conn.recv(2048)
        if not encrypted_data:
            raise Exception('0')

        shareCipher = self._getCipher()
        data = shareCipher.decrypt(encrypted_data)

        return data

    def sendServerPublicKey(self):
        self._send(self.server.firstRSAPublicKeySendOutMessage)

    def sendMessage(self, binary):
        shareCipher = self._getCipher()
        encrypted_data = shareCipher.encrypt(binary)

        self._send(encrypted_data)

    def _send(self, send):
        package_len = len(send).to_bytes(2, sys.byteorder)
        self.conn.sendall(joinBinaryArray(package_len, send))

    def _getCipher(self):
        return AES.new(self.shareKey, AES.MODE_CFB, self.shareIv, segment_size=128)


###############################################################################
###############################################################################

def commandParser(server, raw):
    def showHelp():
        print("""
COMMAND
    .help                            show this help message
    .flag                            show how the server handles messages
    .chflag [flag]                   change how the server handles messages
    .ls                              list all connected clients
    .allow <client>                  allow client(s) to send messages
    .kick <client>                   kick specified client(s)
    .send <client> <content>         send a message to client(s)
    .stop                            stop the server
    
CLIENT SELECTOR
    @a      all clients
    @p      the latest client who sent a message / connected
    <ID>    specified client id, e.g. `5`

FLAG
    p       Print on the console (default)
    s1      Copy to primary selection
    s2      Copy to secondary selection
    s3      Copy to clipboard (default)
    t       Typing text (default)
             - Using with `s1` flag together will simulate clicking middle
               mouse button to paste the content. You might have to position
               your cursor before sending the message.
             - Using with `s3` flag together will simulate shift+insert 
               (like ctrl+v) keys to paste the content.
             - Otherwise, will execute the `xdotool type` command with worse
               performance.
             - paste once as a time.
    
    You can use multiple flags at the same time.
    e.g. `t`, `s`, `pcs1` and `ps1s2t` are acceptable
    
NOTE
    1. Commands must be preceded by a period.
    2. Any input that does not start with a period is understood as sending
       the entire sentence to the latest client (@p).
    3. If you want to send a message that starts with a period, use command 
       `.send @p YOUR MESSAGE`
""")

    def showFlag():
        print(GREEN + 'Flags:', server.flags, RESET)

    def changeFlag(flag):
        flagParser(server.flags, flag)
        print(GREEN + 'Flags changed to', server.flags, RESET)

    def listClients():
        howmany = len(server.clients)
        if howmany == 0:
            print('No client')
        else:
            print('Total of %s client(s):' % (howmany))
            for c in server.clients:
                print('#' + c.id + '\t' + c.addr[0])

    def allowClient(c, arg):
        c.allowed = True
        print(GREEN + 'Accept client #' + c.id, RESET)

    def kickClient(c, arg):
        c.close()
        print(GREEN + 'Kicked #' + c.id, RESET)

    def sendMessage(c, arg):
        c.sendMessage(joinBinaryArray(COPY_FLAG, bytearray(arg[0], 'utf8')))
        print(GREEN + 'Sent to #' + c.id, RESET)

    def stopServer():
        server.close()
        os._exit(0)
        pass

    def clientSelectorHandler(selector, fnc, arg):
        if selector == '@a':
            clients = server.clients
        elif selector == '@p':
            clients = [server.latestClient]
        else:
            thelist = [x for x in server.clients if x.id == selector]
            clients = [thelist and thelist[0] or None]

        for c in clients:
            if c == None:
                raise TypeError('None')
            fnc(c, arg)

    if raw.startswith('.'):
        split = raw.split(' ')

        cmd = split[0][1::1]
        try:
            if cmd == 'help':
                showHelp()
            elif cmd == 'flag':
                showFlag()
            elif cmd == 'chflag':
                flag = split[1] if len(split) > 1 else ''
                changeFlag(flag)
            elif cmd == 'ls':
                listClients()
            elif cmd == 'allow':
                clientSelectorHandler(split[1], allowClient, ())
            elif cmd == 'kick':
                clientSelectorHandler(split[1], kickClient, ())
            elif cmd == 'send':
                clientSelectorHandler(
                    split[1], sendMessage, (' '.join(split[2::1]),))
            elif cmd == 'stop':
                stopServer()
            else:
                print(RED + 'Unknown command', RESET)
                showHelp()
        except TypeError:
            print(RED + 'Client not found', RESET)
        except Exception:
            print(RED + 'Command exception', RESET)
            # print(e)
            showHelp()

    else:
        clientSelectorHandler('@p', sendMessage, (raw,))

    print(RESET)  # Important


def flagParser(flags, flag):
    def alpha(a, b):
        flags[a] = b in flag

    alpha('typing', 't')
    alpha('selection1', 's1')
    alpha('selection2', 's2')
    alpha('selection3', 's3')
    alpha('print', 'p')


###############################################################################
###############################################################################


def joinBinaryArray(*args):
    return b''.join(args)


def getLocalNetworkIp():
    # https://stackoverflow.com/questions/166506/finding-local-ip-addresses-using-pythons-stdlib
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        # doesn't even have to be reachable
        s.connect(('10.255.255.255', 1))
        IP = s.getsockname()[0]
    except Exception:
        IP = '127.0.0.1'
    finally:
        s.close()
    return IP


def showWelcomeMessage(server, client):
    display = [client.securityCode[i:i+4]
               for i in range(0, len(client.securityCode), 4)]
    print('Security Code:')
    print(YELLOW + ('%s %s %s %s\n%s %s %s %s\n' % tuple(display)) + RESET)
    print('To ensure your messages are secured, please verify that the security code\n' +
          'displayed on the screen is exactly the same as the one displayed on the client.\n')

    if not client.allowed:
        print('Use command' + BLUE + ' .allow ' + client.id +
              RESET + ' to allow the client to send messages\n')


def handleMessage(server, client, msg):
    if server.flags['print']:
        print(BLUE + '#' + client.id + '>' + RESET, msg)

    cmd = ''

    if server.flags['selection1']:
        cmd += 'echo -n "$c" | xclip -sel p;'

    if server.flags['selection2']:
        cmd += 'echo -n "$c" | xclip -sel s;'

    if server.flags['selection3']:
        cmd += 'echo -n "$c" | xclip -sel c;'

    if server.flags['typing']:
        if server.flags['selection3']:
            cmd += 'xdotool key shift+0xff63;'
        elif server.flags['selection1']:
            cmd += 'xdotool click --clearmodifiers 2;'
        else:
            cmd += 'echo -n "$c" | xdotool type --file -;'

    if cmd != '':
        prefix = 'c="%s";' % msg.replace('\\', '\\\\\\\\')\
                                .replace('"', '\\"')\
                                .replace('$', '\\$')
        os.system(prefix + cmd)


###############################################################################
###############################################################################


def clientThread(server, conn, addr):
    print(GREEN + '\nConnected by', addr[0], RESET)

    try:
        thisClient = Client(server, conn, addr)
        server.addClient(thisClient)

        ##############

        thisClient.sendServerPublicKey()
        thisClient.getAESKey()

        showWelcomeMessage(server, thisClient)

        ##############

        while True:
            server.latestClient = thisClient

            result = thisClient.recvMessage()

            msgid = result[0:4]
            msg = result[4::1].decode()

            if not thisClient.allowed:
                continue

            handleMessage(server, thisClient, msg)

            thisClient.sendMessage(joinBinaryArray(PONG_FLAG, msgid))
    except Exception as e:
        print(RED + 'Disconnected by', addr[0], RESET)
        print(e)
        pass

    conn.close()
    server.removeClient(thisClient)
    print(RED + 'Closed', addr[0], RESET)


def serverThread():
    global usingServer

    try:
        usingServer = Server(HOST, PORT)
        print("""
🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥  Quarter Share
🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥
🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥  Use command %s to learn more about the server's
🟥🟥🟥⬜⬜⬜🟥⬜⬜⬜🟥  internal commands
🟥🟥🟥🟥🟥⬜🟥⬜🟥🟥🟥  
🟥🟥🟥⬜⬜⬜🟥⬜⬜⬜🟥  The server is running at %s:%d
🟥🟥🟥⬜🟥🟥🟥🟥🟥⬜🟥  
🟥⬜🟥⬜⬜⬜🟥⬜⬜⬜🟥  
🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥  
🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥  
🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥
""" % (BLUE + '.help' + RESET, getLocalNetworkIp(), usingServer.port))
    except Exception as e:
        print(RED + "failed to initialize the server, ", e, RESET)
        os._exit(1)

    while True:
        # Establish connection with client.
        newConn, addr = usingServer.socket.accept()
        _thread.start_new_thread(clientThread, (usingServer, newConn, addr))


###############################################################################
###############################################################################


if __name__ == '__main__':

    usingServer = None

    parser = argparse.ArgumentParser(description="""
FLAG
    p       Print on the console (default)
    s1      Copy to primary selection
    s2      Copy to secondary selection
    s3      Copy to clipboard (default)
    t       Typing text (default)
             - Using with `s1` flag together will simulate clicking middle
               mouse button to paste the content. You might have to position
               your cursor before sending the message.
             - Using with `s3` flag together will simulate shift+insert 
               (like ctrl+v) keys to paste the content.
             - Otherwise, will execute the `xdotool type` command with worse
               performance.
             - paste once as a time. 
    
""", formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument(
        "--host",
        help="The server's hostname or IP address",
        dest="host",
        default="0.0.0.0")
    parser.add_argument(
        "--port",
        help="The port to listen on",
        dest="port",
        default="7984",
        type=int)
    parser.add_argument(
        "-a",
        "--allow",
        help="Allow all clients to send messages to the server without the user's permission",
        default=False,
        action='store_true')
    parser.add_argument(
        "-f",
        "--flag",
        help="mode flag",
        dest="flag",
        default="ps3t")

    args = parser.parse_args()

    HOST = args.host
    PORT = args.port

    DEFAULT_ALLOW = args.allow
    DEFAULT_FLAGS = {}
    flagParser(DEFAULT_FLAGS, args.flag)

    try:
        _thread.start_new_thread(serverThread, ())

        while True:
            # Important, get the input first, then call commandParser
            raw = input()
            commandParser(usingServer, raw)
    except KeyboardInterrupt:
        print('\nKeyboard Interrupt, Exit')

        if usingServer != None:
            usingServer.close()

        exit(0)
